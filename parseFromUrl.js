import fs from "fs";
import path from "path";
import puppeteer from "puppeteer";

const sleep = (ms) => new Promise((res) => setTimeout(res, ms));

async function autoScroll(page) {
  await page.evaluate(async () => {
    await new Promise((resolve) => {
      let totalHeight = 0;
      const distance = 400;
      const timer = setInterval(() => {
        const scrollHeight = document.body.scrollHeight;
        window.scrollBy(0, distance);
        totalHeight += distance;
        if (totalHeight >= scrollHeight - window.innerHeight) {
          clearInterval(timer);
          resolve();
        }
      }, 300);
    });
  });
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ OLX –≤ MHTML
 */
async function scrapeAd(url, saveDir, browser) {
  const page = await browser.newPage();
  await page.setViewport({ width: 1280, height: 900 });

  console.log(`‚û°Ô∏è –ó–∞–≥—Ä—É–∂–∞—é –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: ${url}`);
  await page.goto(url, { waitUntil: "domcontentloaded", timeout: 60000 });

  // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω
  try {
    await page.waitForSelector('button[data-testid="show-phone"]', { timeout: 5000 });
    await page.click('button[data-testid="show-phone"]');
    await page.waitForSelector('[data-testid="contact-phone"]', { timeout: 10000 });
    console.log("‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–∫–∞–∑–∞–Ω!");
  } catch {
    console.warn("‚ö†Ô∏è –¢–µ–ª–µ—Ñ–æ–Ω –æ—Ç–∫—Ä—ã—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å.");
  }

  // –°–Ω–∏–º–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  let data = null;
  try {
    const cdp = await page.target().createCDPSession();
    await cdp.send("Page.enable");
    const snapshot = await cdp.send("Page.captureSnapshot", { format: "mhtml" });
    data = snapshot.data;
  } catch (err) {
    console.error(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å MHTML –¥–ª—è ${url}: ${err.message}`);
  }

  // –ò–º—è —Ñ–∞–π–ª–∞ = title —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  let title = await page.title();
  let safeName = title.replace(/[<>:"/\\|?*]+/g, " ").trim().substring(0, 100);
  if (!safeName) safeName = `olx_ad_${Date.now()}`;
  const filePath = path.join(saveDir, `${safeName}.mhtml`);

  if (!fs.existsSync(saveDir)) {
    fs.mkdirSync(saveDir, { recursive: true });
  }

  if (data) {
    fs.writeFileSync(filePath, data);
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${filePath}`);
  } else {
    const htmlPath = filePath.replace(/\.mhtml$/, ".html");
    await fs.promises.writeFile(htmlPath, await page.content(), "utf-8");
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ (fallback HTML): ${htmlPath}`);
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∏—Å–∫–∞
 */
export async function scrapeSearch(searchUrl, saveDir, browser = null) {
  let localBrowser = browser;
  let adsCount = 0;

  if (!localBrowser) {
    localBrowser = await puppeteer.launch({
      headless: false,
      slowMo: 100,
      args: ["--no-sandbox", "--disable-setuid-sandbox"],
    });
  }

  const page = await localBrowser.newPage();
  await page.setViewport({ width: 1280, height: 900 });

  console.log(`üîé –ó–∞–≥—Ä—É–∂–∞—é –ø–æ–∏—Å–∫: ${searchUrl}`);
  await page.goto(searchUrl, { waitUntil: "domcontentloaded", timeout: 60000 });

  await autoScroll(page);

  let adLinks = await page.$$eval(
    'a[href*="/obyavlenie/"], a[href*="/offer/"]',
    (els) =>
      els
        .map((el) => el.getAttribute("href"))
        .filter(Boolean)
        .map((href) =>
          href.startsWith("http") ? href : "https://www.olx.uz" + href
        )
  );

  // —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  adLinks = [...new Set(adLinks)];

  console.log(`üìå –ù–∞–π–¥–µ–Ω–æ ${adLinks.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.`);

  await page.close();

  for (const adUrl of adLinks) {
    adsCount++;
    await scrapeAd(adUrl, saveDir, localBrowser);
  }

  if (!browser) {
    await localBrowser.close();
  }

  console.log(`üéâ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${adsCount} –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –ø–æ–∏—Å–∫–∞.`);
}

/**
 * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ –ø–æ–∏—Å–∫–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
 */
export async function scrapeMultipleSearches(tasks) {
  const browser = await puppeteer.launch({
    headless: false,
    slowMo: 100,
    args: ["--no-sandbox", "--disable-setuid-sandbox"],
  });

  for (const { url, saveDir } of tasks) {
    await scrapeSearch(url, saveDir, browser);
  }

  await browser.close();
  console.log("üéâ –í—Å–µ –ø–æ–∏—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!");
}

// üöÄ CLI –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
if (process.argv.length >= 4) {
  const url = process.argv[2];
  const saveDir = process.argv[3];

  scrapeSearch(url, saveDir)
    .then(() => {
      console.log("üéâ –ì–æ—Ç–æ–≤–æ!");
    })
    .catch((err) => {
      console.error("‚ùå –û—à–∏–±–∫–∞:", err);
    });
}
