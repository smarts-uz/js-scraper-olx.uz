import puppeteer from "puppeteer";
import { scrapeAd } from './scrapeAd.js';
import { getPaginationUrls } from './pagination.js';
import { autoScroll, sleep } from './utils.js';
import dotenv from 'dotenv';
import path from 'path';

// Load environment variables from .env file
dotenv.config({ path: path.resolve(process.cwd(), '.env') });
console.log(process.cwd(),"cwd");

/**
 * Saves all ads from a search page, including pagination
 */
export async function scrapeSearch(searchUrl, saveDir, browser = null) {


  let localBrowser = browser;
  let adsCount = 0;

  if (!localBrowser) {
    localBrowser = await puppeteer.launch({
      headless: process.env.HeadlessURL === 'true' || process.env.HeadlessURL === true ? true : process.env.HeadlessURL === 'new' ? 'new' : false,
      slowMo: 100,
      args: ["--no-sandbox", "--disable-setuid-sandbox"],
    });
  }

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const mainPage = await localBrowser.newPage();
  await mainPage.setViewport({ width: 1280, height: 900 });
  console.log(`üìñ –ó–∞–≥—Ä—É–∂–∞—é –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: ${searchUrl}`);
  await mainPage.goto(searchUrl, { waitUntil: "domcontentloaded", timeout: 60000 });
  
  // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  await autoScroll(mainPage);
  await sleep(2000); // –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  
  const paginationUrls = await getPaginationUrls(mainPage);
  await mainPage.close();
  
  console.log(`üìë –ù–∞–π–¥–µ–Ω–æ ${paginationUrls.length} —Å—Ç—Ä–∞–Ω–∏—Ü –ø–∞–≥–∏–Ω–∞—Ü–∏–∏`);
  
  // –ï—Å–ª–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  let urlsToProcess = [searchUrl];
  if (paginationUrls.length > 0) {
    // Add original search URL and all pagination URLs
    urlsToProcess = [searchUrl, ...paginationUrls];
    // Remove duplicates
    urlsToProcess = [...new Set(urlsToProcess)];
  }
  
  console.log(`üìÑ –í—Å–µ–≥–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${urlsToProcess.length} —Å—Ç—Ä–∞–Ω–∏—Ü`);
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞
  for (const [index, url] of urlsToProcess.entries()) {
    console.log(`üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É ${index + 1}/${urlsToProcess.length}: ${url}`);
    
    const page = await localBrowser.newPage();
    await page.setViewport({ width: 1280, height: 900 });
    
    await page.goto(url, { waitUntil: "domcontentloaded", timeout: 60000 });
    await autoScroll(page);
    
    let adLinks = await page.$$eval(
      'a[href*="/obyavlenie/"], a[href*="/offer/"]',
      (els) =>
        els
          .map((el) => el.getAttribute("href"))
          .filter(Boolean)
          .map((href) =>
            href.startsWith("http") ? href : "https://www.olx.uz" + href
          )
    );
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    adLinks = [...new Set(adLinks)];
    console.log(`üìå –ù–∞–π–¥–µ–Ω–æ ${adLinks.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.`);
    
    await page.close();
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    for (const adUrl of adLinks) {
      adsCount++;
      await scrapeAd(adUrl, saveDir, localBrowser);
    }
    
    // –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
    if (index < urlsToProcess.length - 1) {
      console.log("‚è≥ –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π...");
      await sleep(3000);
    }
  }

  if (!browser) {
    await localBrowser.close();
  }

  console.log(`üéâ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${adsCount} –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –ø–æ–∏—Å–∫–∞.`);
}

/**
 * Accepts an array of searches and saves all ads
 */
export async function scrapeMultipleSearches(tasks) {
  console.log(process.env.HeadlessURL,'headlessURL');

 const browser = await puppeteer.launch({
    headless: process.env.HeadlessURL === 'true' || process.env.HeadlessURL === true ? true : process.env.HeadlessURL === 'new' ? 'new' : false,
    slowMo: 100,
    args: ["--no-sandbox", "--disable-setuid-sandbox"],
  });

  for (const { url, saveDir } of tasks) {
    await scrapeSearch(url, saveDir, browser);
  }

  await browser.close();
  console.log("üéâ –í—Å–µ –ø–æ–∏—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!");
}

// üöÄ CLI for a single search
if (process.argv.length >= 4) {
  const url = process.argv[2];
  const saveDir = process.argv[3];

  scrapeSearch(url, saveDir)
    .then(() => {
      console.log("üéâ –ì–æ—Ç–æ–≤–æ!");
    })
    .catch((err) => {
      console.error("‚ùå –û—à–∏–±–∫–∞:", err);
    });
}
